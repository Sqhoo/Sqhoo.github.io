<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sqhoo</title>
  
  <subtitle>A poor programmer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Sqhoo.github.io/"/>
  <updated>2019-01-18T08:24:52.696Z</updated>
  <id>http://Sqhoo.github.io/</id>
  
  <author>
    <name>Sqhoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud利用Eureka搭建注册中心</title>
    <link href="http://Sqhoo.github.io/2019/01/18/SpringCloud%E5%88%A9%E7%94%A8Eureka%E6%90%AD%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://Sqhoo.github.io/2019/01/18/SpringCloud利用Eureka搭建注册中心/</id>
    <published>2019-01-18T03:30:30.000Z</published>
    <updated>2019-01-18T08:24:52.696Z</updated>
    
    <content type="html"><![CDATA[<h2>什么是<a href="https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin" target="_blank" rel="noopener">SpringCloud</a></h2><blockquote><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p></blockquote><h2>创建服务注册中心</h2><p>这里采用Eureka作为服务注册与发现的组件</p><ol><li><p>创建一个springboot项目，勾选Eureka组件&lt;!-- more --&gt;<img src="https://sqhoo.github.io/blogImg/java%E6%A1%86%E6%9E%B6%E5%8C%BA/SpringCloud%E5%88%A9%E7%94%A8Eureka%E6%90%AD%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/pic1.png" alt="pic1"></p></li><li><p>编写配置文件（这里使用yml类型的配置文件）<br>application.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置服务器端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"><span class="comment">#配置eureka注册相关配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#配置注册中心url</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultzone:</span> <span class="attr">http://localhost:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></p></li><li><p>编写启动类<br>在启动类上加上<code>@EnableEurekaServer</code>来标识这是注册中心SpringcloudServerApplication.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>启动服务<br>访问<code>http://localhost:8761</code>能看到以下界面，但是还没有服务注册进来<img src="https://sqhoo.github.io/blogImg/java%E6%A1%86%E6%9E%B6%E5%8C%BA/SpringCloud%E5%88%A9%E7%94%A8Eureka%E6%90%AD%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/pic2.png" alt="pic2"></p></li></ol><h2>创建一个client服务</h2><ol><li><p>创建项目的步骤和之前的步骤一样，创建好项目之后，需要配置<code>application.yml</code>文件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置服务的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">service-client</span></span><br><span class="line"><span class="comment">#设置服务器的端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8762</span></span><br><span class="line"><span class="comment">#设置服务注册中心地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure></p></li><li><p>编写启动类<br>通过注解<code>@EnableEurekaClient</code> 表明自己是一个eurekaclientSpringcloudClientApplication.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloudclient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringcloudClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    String port;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/client"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">client1</span><span class="params">(@RequestParam String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hi "</span>+name+<span class="string">" this is port:"</span>+port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><h2>启动工程</h2><ol><li>访问<code>http://localhost:8761</code>，可以看到服务已经被注册到注册中心<br><img src="https://sqhoo.github.io/blogImg/java%E6%A1%86%E6%9E%B6%E5%8C%BA/SpringCloud%E5%88%A9%E7%94%A8Eureka%E6%90%AD%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/pic3.png" alt="pic3"></li><li>这时候可以访问<code>http://localhost:8762/client?name=tom</code><br>页面显示为<img src="https://sqhoo.github.io/blogImg/java%E6%A1%86%E6%9E%B6%E5%8C%BA/SpringCloud%E5%88%A9%E7%94%A8Eureka%E6%90%AD%E5%BB%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/pic4.png" alt="pic4"></li></ol><h2>参考资料</h2><ul><li><a href="https://blog.csdn.net/forezp/article/details/81040925" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/81040925</a></li><li><a href="https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;什么是&lt;a href=&quot;https://baike.baidu.com/item/spring%20cloud/20269825?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SpringCloud&lt;/a&gt;&lt;/h2&gt;
&lt;blockq
      
    
    </summary>
    
      <category term="java框架区" scheme="http://Sqhoo.github.io/categories/java%E6%A1%86%E6%9E%B6%E5%8C%BA/"/>
    
    
      <category term="springboot" scheme="http://Sqhoo.github.io/tags/springboot/"/>
    
      <category term="springcloud" scheme="http://Sqhoo.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>利用SpringBoot搭建简单的MVC环境</title>
    <link href="http://Sqhoo.github.io/2019/01/11/%E5%88%A9%E7%94%A8SpringBoot%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84MVC%E7%8E%AF%E5%A2%83/"/>
    <id>http://Sqhoo.github.io/2019/01/11/利用SpringBoot搭建简单的MVC环境/</id>
    <published>2019-01-11T06:07:00.000Z</published>
    <updated>2019-01-18T05:57:00.278Z</updated>
    
    <content type="html"><![CDATA[<h2>什么是<a href="https://baike.baidu.com/item/Spring%20Boot/20249767?fr=aladdin" target="_blank" rel="noopener">springboot</a></h2><blockquote><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p></blockquote><h2>搭建MVC框架</h2><ol><li>在pom文件中导入依赖</li></ol><ul><li>说明：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这一块是springboot核心依赖部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>&lt;!-- more --&gt;</p><ul><li>依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里我们使用阿里巴巴的数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springboot web项目相关依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql数据库连接依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>配置文件<br>这里我们采用yml文件来配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 配置服务器端口号</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment"># 配置启动根路径</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    context-path:</span> <span class="string">/hsq</span></span><br><span class="line"><span class="comment"># spring的配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置数据源以及连接池</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/happyCake</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    platform:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment"># mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 配置实体类的包路径</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.springboot.entity</span></span><br><span class="line">  <span class="comment"># 配置驼峰命名规则</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 配置mapper.xml文件扫描</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure></li></ol><p>**这里需要注意:**如果出现<code>configuration</code>与<code>config-locations</code>不能同时存在的错误，需要将<code>config-locations</code>换成<code>mapper-locations</code></p><ol start="3"><li>开始进行包的创建</li></ol><ul><li><p>我的项目的包结构如下<br><img src="https://sqhoo.github.io/blogImg/java%E6%A1%86%E6%9E%B6%E5%8C%BA/%E5%88%A9%E7%94%A8SpringBoot%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84MVC%E7%8E%AF%E5%A2%83/pic1.png" alt=""></p></li><li><p>编写实体类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String userEmail;</span><br><span class="line">    <span class="keyword">private</span> String userTel;</span><br><span class="line">    <span class="keyword">private</span> String userTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此处省略getter和setter方法</span></span><br></pre></td></tr></table></figure></p></li><li><p>编写dao层<br>创建dao层接口<code>UserDao</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.dao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注解Mapper作用是将此接口交给spring管理（IOC）</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>编写<code>mapper.xml</code>文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.springboot.dao.UserDao"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id需要与UserDao的方法名相同 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>编写service层</p></li></ul><ol><li><p>先创建好接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>然后编写实现类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将UserServiceImpl控制权交给spring（IOC）</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// idea编译器userDao报红为编译器bug，不用理会</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><p><strong>注意:</strong><code>@Autowired</code>最好注解在构造函数上，因为当这个类生成时，先执行构造方法，如果构造方法已经用到<code>userDao</code>这个变量时，<code>userDao</code>还没有被注入，会出错，并且<code>userDao</code>一定是final类型，可写可不写。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似这种写法会报错</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; user = <span class="keyword">this</span>.userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>编写控制器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.control;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此注解为@ResponseBody与@Controller的合体</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">// 此控制器映射在/根目录/user下</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserControl</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此接口映射在/根目录/user/getUser下</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>编写main函数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此注解为标示此类为springboot启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>运行结果<br>访问<code>http://localhost:8080/hsq/user/getUser</code><br><img src="https://sqhoo.github.io/blogImg/java%E6%A1%86%E6%9E%B6%E5%8C%BA/%E5%88%A9%E7%94%A8SpringBoot%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84MVC%E7%8E%AF%E5%A2%83/pic2.png" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;什么是&lt;a href=&quot;https://baike.baidu.com/item/Spring%20Boot/20249767?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;springboot&lt;/a&gt;&lt;/h2&gt;
&lt;blockquo
      
    
    </summary>
    
      <category term="java框架区" scheme="http://Sqhoo.github.io/categories/java%E6%A1%86%E6%9E%B6%E5%8C%BA/"/>
    
    
      <category term="springboot" scheme="http://Sqhoo.github.io/tags/springboot/"/>
    
      <category term="mybatis" scheme="http://Sqhoo.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>多线程相关知识总结</title>
    <link href="http://Sqhoo.github.io/2018/09/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://Sqhoo.github.io/2018/09/04/多线程相关知识总结/</id>
    <published>2018-09-04T07:56:17.000Z</published>
    <updated>2018-09-06T09:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3>什么是线程</h3><blockquote><p>线程是进程中的一个实体，是被系统独立调度和分派的基本单位</p></blockquote><h3>线程和进程的区别</h3><blockquote><p>  进程:具有一定独立功能的程序关于某个数据集合上的一次运行活动,是操作系统进行资源分配和调度的一个独立单位。<br>  线程:是进程的一个实体,是 cpu 调度和分派的基本单位,是比进程更小的可以独立运行的基本单位。<br>  特点:线程的划分尺度小于进程,这使多线程程序拥有高并发性,进程在运行时各自内存单元相互独立,线程之间内存共享,这使多线程编程可以拥有更好的性能和用户体验。</p></blockquote><h3>创建线程的4种方法</h3><ol><li>继承Thread类</li></ol><ul><li><p>定义Thread类的子类，并重写run方法,run方法就是线程所要完成是任务</p></li><li><p>创建Thread类的实例</p></li><li><p>调用该线程的start方法以启动线程</p><p>ThreadMethod.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"继承Thread方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&lt;!-- more --&gt;<br>Test.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> ThreadMethod().start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><ol start="2"><li>实现Runable接口</li></ol><ul><li><p>定义一个类实现Runable接口，重写run方法</p></li><li><p>创建该类的实例为Thread的Target参数，再创建一个Thread对象，将Target传入其构造函数中</p></li><li><p>调用该Thread对象的start方法以启动线程</p><p>RunableMethod.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunableMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实现Runable方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Test.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    RunableMethod runableMethod=<span class="keyword">new</span> RunableMethod();</span><br><span class="line">    Thread thread=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">        thread=<span class="keyword">new</span> Thread(runableMethod);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><ol start="3"><li>实现callable接口<blockquote><p>特点：callable实现call方法来作为执行体，有返回值</p></blockquote></li></ol><ul><li>创建一个类实现Callable接口，重写call方法</li><li>在测试类中创建一个线程池，用来从中取得线程对象</li><li>创建这个类的对象，并同时创建一个FutureTask对象用来存放它</li><li>将这个FutureTask对象上传到线程池对象中</li><li>最后关闭线程池</li></ul><p>CallableMethod.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableMethod</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"callable启动了"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Test.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     ExecutorService executorService= Executors.newCachedThreadPool();</span><br><span class="line">     CallableMethod callableMethod=<span class="keyword">null</span>;</span><br><span class="line">     FutureTask&lt;Integer&gt; futureTask=<span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">         callableMethod=<span class="keyword">new</span> CallableMethod();</span><br><span class="line">         futureTask=<span class="keyword">new</span> FutureTask&lt;Integer&gt;(callableMethod);</span><br><span class="line">         executorService.submit(futureTask);</span><br><span class="line">         Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     executorService.shutdown();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>利用线程池创建线程</p><blockquote><p>什么是线程池：线程池就是事先将多个对象放到一个容器中，当使用的时候就不用创建线程对象而是直接去线程池中拿线程即可。节省了开辟线程的时间，提高代码的执行效率。常用线程池:<br>1. newSingleThreadExecutor:创建一个单线程的线程池,此线程池保证所有任务的执行顺序按照任务的提交顺序执行。<br>2. newFixedThreadPool:创建固定大小的线程池,每次提交一个任务就创建一个线程,直到线程达到线程池的最大大小。<br>3. newCachedThreadPool:创建一个可缓存的线程池,此线程池不会对线程池大小做限制,线程池大小完全依赖于操作系统(或者说 JVM)能够创建的最大线程大小。<br>4. newScheduledThreadPool:创建一个大小无限的线程池,此线程池支持定时以及周期性执行任务的需求。<br>5. newSingleThreadExecutor:创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。</p></blockquote><p>Mythread.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName()+<span class="string">"   正在执行。。。。"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Test.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         ExecutorService pool= Executors.newFixedThreadPool(<span class="number">3</span>);<span class="comment">//创建一个固定大小的线程池</span></span><br><span class="line">         Thread t1=<span class="keyword">new</span> Mythread();</span><br><span class="line">         Thread t2=<span class="keyword">new</span> Mythread();</span><br><span class="line">         Thread t3=<span class="keyword">new</span> Mythread();</span><br><span class="line">         pool.execute(t1);</span><br><span class="line">         pool.execute(t2);</span><br><span class="line">         pool.execute(t3);</span><br><span class="line">         pool.shutdown();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><p><strong>注意：</strong> 线程默认先执行当前类的线程(主线程)，然后再执行其他的线程。</p><h3>synchronized 和 volatile 关键字的作用</h3><ul><li><p>volatile<br>1）一旦一个成员变量或静态成员变量被volatile修饰后,就具备了两层意义<br>a.保证了不同线程对变量进行操作的可见性,也就是一个线程修改了值，这个值对其他线程也是可见的。<br>b.禁止进行指令重排序。<br>2）volatile本质是告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取。<br>3）只能使用在变量级别。<br>4）仅能实现变量的修改可见性，但是不能保证原子性。<br>5）不会造成线程阻塞。<br>6）volatile标记的变量不会被编译器优化。</p></li><li><p>synchronized<br>1）锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞<br>2）sychronized可以使用在变量、方法和类级别<br>3）sychronized可以保证变量修改的可见性和原子性<br>4）可能造成线程阻塞<br>5）sychronized标记的变量会被编译器优化<br>需求：循环打印A和B十次<br>TestA.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TestAll.testAll) &#123;</span><br><span class="line">                System.out.println(<span class="string">"A"</span>);</span><br><span class="line">                count--;</span><br><span class="line">                TestAll.testAll.notify();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TestAll.testAll.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>TestB.java</code></pre><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TestAll.testAll) &#123;</span><br><span class="line">                System.out.println(<span class="string">"B"</span>);</span><br><span class="line">                count--;</span><br><span class="line">                TestAll.testAll.notify();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TestAll.testAll.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TestAll.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAll</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> TestAll testAll=<span class="keyword">new</span> TestAll();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TestA()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TestB()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;什么是线程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;线程是进程中的一个实体，是被系统独立调度和分派的基本单位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;线程和进程的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;  进程:具有一定独立功能的程序关于某个数据集合上的一次
      
    
    </summary>
    
      <category term="java基础" scheme="http://Sqhoo.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="多线程" scheme="http://Sqhoo.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Tcp/ip协议</title>
    <link href="http://Sqhoo.github.io/2018/07/26/Tcp-ip%E5%8D%8F%E8%AE%AE/"/>
    <id>http://Sqhoo.github.io/2018/07/26/Tcp-ip协议/</id>
    <published>2018-07-26T11:43:44.000Z</published>
    <updated>2018-07-27T14:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2>前言</h2><p>我们先来了解一下http协议的请求流程：</p><ol><li>建立连接：客户端与服务器建立TCP连接.</li><li>发送请求：打开一个连接后，客户端把请求信息发送到服务器的相应端口上，完成请求动作提交.</li><li>发送响应：服务器在处理完客户端请求之后，要向客户端发送响应消息。</li><li>关闭连接：客户端和服务器端都可以关闭套接字来结束TCP/IP对话</li></ol><h2><a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">TCP/IP 协议</a></h2><blockquote><p>Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</p></blockquote><h3>重要的符号</h3><p>&lt;!-- more --&gt;<img src="https://sqhoo.github.io/blogImg/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8C%BA/TcpIp%E5%8D%8F%E8%AE%AE/%E5%9B%BE%E7%89%871.png" alt=""></p><ol><li>Seq序号：用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li><li>Ack序号：确认序号，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1。</li><li>标志位:<ul><li>URG：紧急指针有效</li><li>ACK：确认序号有效</li><li>PSH：接收方应该尽快将这个报文交给应用层</li><li>RST：重置连接</li><li>SYN：发起一个新连接</li><li>FIN：释放一个连接</li></ul></li></ol><p><strong>注意:</strong> ACK表示的是确认序号有效的标志，Ack序号是一个序号，它的值是确认序号的值+1</p><h3>三次握手</h3><p><img src="https://sqhoo.github.io/blogImg/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8C%BA/TcpIp%E5%8D%8F%E8%AE%AE/%E5%9B%BE%E7%89%872.png" alt=""></p><ol><li>第一次握手：客户端是发起一个新连接，将SYN置为1，随机产生一个序号j赋值给seq，将这两个数据以包的形式发送给客户端，客户端进入了SYN_SENT状态，等待服务端确认。</li><li>第二次握手：服务端收到数据包后，检查SYN为1，知道了客户端请求建立连接，将SYN和ACK都置为1，并将Ack序号置为客户端的确认序号seq+1（j+1），然后又随机产生一个新序号k赋值给seq,将这四个数据以包的形式传给客户端确认连接请求，服务端进入SYN_RCVD状态。</li><li>第三次握手：客户端收到数据包后，确认ACK是否为1以确认第一次握手中的seq是否有效，在检查Ack序号是否为j+1，满足则将ACK置为1，Ack序号置为服务端的确认序号seq+1（k+1）,将这些数据以包的形式发送给服务端，服务端如果检查到ACK为1，Ack序号为k+1，则建立成功，服务端和客户端进入ESTABLISHED状态，三次握手完成。</li></ol><h3>四次挥手</h3><p><img src="https://sqhoo.github.io/blogImg/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8C%BA/TcpIp%E5%8D%8F%E8%AE%AE/%E5%9B%BE%E7%89%873.png" alt=""></p><ol><li>第一次挥手：客户端发送一个FIN传达释放连接指令，随机产生一个序号j赋值给seq，进入FIN_WAIT_1状态</li><li>第二次挥手：服务端收到了客户端发来的FIN信号，同样需要发送ACK以确认seq有效，还需要置Ack为j+1并一起发送到服务端，并随机产生一个序号k赋值给seq。服务器进入CLOSE_WAIT状态</li><li>第三次挥手：服务器发送一个FIN，再发送一次ACK=1，用来关闭服务器到客户端之间的数据传送。服务端进入LAST_ACK状态</li><li>第四次挥手：客户端收到的ACK为1且Ack序号为j+1，则将ACK置为1表示确认序号有效，将Ack序号置为k+1，将数据以包的形式传给服务端，服务端收到检查到ACK为1表示确认序号有效，且Ack序号为k+1,则进入CLOSE状态，完成四次挥手。</li></ol><p><strong>注意:</strong><br>为什么挥手为四次，握手为三次？因为在三次握手中，服务端收到了SYN=1信号，表示建立一个连接且可接收数据，服务器再将数据包传递给客户端确认已确认连接。但是在四次挥手中，服务器收到FIN=1时，表示发送了一个关闭连接的请求，但是并不代表客户端不能接受数据，所以先将一些数据包发给客户端，然后再发送FIN确认关闭请求。所以会与FIN分开发送。</p><h3>备注</h3><p><a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">TCP/IP 协议</a>的概念来源于百度百科</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;我们先来了解一下http协议的请求流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立连接：客户端与服务器建立TCP连接.&lt;/li&gt;
&lt;li&gt;发送请求：打开一个连接后，客户端把请求信息发送到服务器的相应端口上，完成请求动作提交.&lt;/li&gt;
&lt;li&gt;发送响应：服务器
      
    
    </summary>
    
      <category term="计算机网络区" scheme="http://Sqhoo.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8C%BA/"/>
    
    
      <category term="面试" scheme="http://Sqhoo.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>利用jsp实现母版页</title>
    <link href="http://Sqhoo.github.io/2018/07/19/%E5%88%A9%E7%94%A8jsp%E5%AE%9E%E7%8E%B0%E6%AF%8D%E7%89%88%E9%A1%B5/"/>
    <id>http://Sqhoo.github.io/2018/07/19/利用jsp实现母版页/</id>
    <published>2018-07-19T13:03:59.000Z</published>
    <updated>2018-07-19T21:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2>前言</h2><p>如果制作若干使用相同外观框架且某个部分的内容不同的界面时，普通的html是不能实现这种功能的。jsp中的<code>jsp:include</code>标签可以实现母版页这个功能。</p><h2>使用方法</h2><ol><li><p>新建一个<code>mater.jsp</code>页面<br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--其他代码从这里拼接--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">"&lt;%= request.getParameter(\"</span><span class="attr">page</span>\")%&gt;</span>"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>新建一个<code>son.jsp</code>页面<br>&lt;!-- more --&gt;代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello,son.jsp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>在浏览器访问 <code>你的页面路径/master,jsp?page=son.jsp</code><br>结果如下<br><img src="https://sqhoo.github.io/blogImg/jsp%E5%8C%BA/%E5%88%A9%E7%94%A8jsp%E5%AE%9E%E7%8E%B0%E6%AF%8D%E7%89%88%E9%A1%B5/jsp%E6%AF%8D%E7%89%88%E9%A1%B5.png" alt=""></p></li></ol><h2>说明</h2><p>这种方法将<code>master.jsp</code>变成了母版页,只需要page的参数改变即可得到不同的界面共用相同的框架。page后面的参数值也可以是html页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;如果制作若干使用相同外观框架且某个部分的内容不同的界面时，普通的html是不能实现这种功能的。jsp中的&lt;code&gt;jsp:include&lt;/code&gt;标签可以实现母版页这个功能。&lt;/p&gt;
&lt;h2&gt;使用方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;新建一
      
    
    </summary>
    
      <category term="jsp区" scheme="http://Sqhoo.github.io/categories/jsp%E5%8C%BA/"/>
    
    
      <category term="随笔" scheme="http://Sqhoo.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>EL表达式</title>
    <link href="http://Sqhoo.github.io/2018/07/09/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://Sqhoo.github.io/2018/07/09/EL表达式/</id>
    <published>2018-07-09T06:58:33.000Z</published>
    <updated>2018-07-10T09:44:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1>介绍一些常用的EL表达式</h1><h4>首先先了解一下什么是EL表达式</h4><p><a href="https://baike.baidu.com/item/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/1190845" target="_blank" rel="noopener">EL表达式</a>：EL（Expression Language） 是为了使JSP写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。</p><h4>针对EL表达式是否生效</h4><p>请查下web.xml下的开头，如有以下内容，表示Servlet2.4 / JSP2.0<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.4"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果没有的话，说明是Servlet2.3 / JSP1.2,可在jsp页面直接加上这段话或者在开头加上<code>&lt;%@ page isELIgnored=&quot;false&quot;&gt;</code>或者，在web.xml中加入以下代码<br>&lt;!-- more --&gt;<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-ignored</span>&gt;</span>false<span class="tag">&lt;/<span class="name">el-ignored</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp-config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4>一些基本语法</h4><ol><li>使用变量名获取值请看下面的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">"username"</span>,<span class="string">"zhangsan"</span>); </span><br><span class="line">%&gt;</span><br><span class="line">获取的值为：$&#123;username&#125;</span><br></pre></td></tr></table></figure></li></ol><p>运行结果:<br><img src="https://sqhoo.github.io/blogImg/jsp%E5%8C%BA/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/EL_1.png" alt=""></p><ol start="2"><li>使用对象名获取属性值请看下面的例子：<br>首先定义一个实体类User,定义姓名、年龄、性别为这个类的属性，生成getter和setter方法<br>然后在jsp页面写上setter方法,然后用EL表达式取出数据。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">User user=<span class="keyword">new</span> User();<span class="comment">//实例化一个User</span></span><br><span class="line">user.setName=<span class="string">"lisi"</span>;</span><br><span class="line">user.setAge=<span class="number">12</span>;</span><br><span class="line">user.setSex=<span class="string">"女"</span>;</span><br><span class="line">request.setAttribute(<span class="string">"User"</span>,user);</span><br><span class="line">%&gt;</span><br><span class="line">姓名：$&#123;User.Name&#125;&lt;br&gt;</span><br><span class="line">年龄：$&#123;User.Age&#125;&lt;br&gt;</span><br><span class="line">性别：$&#123;User[<span class="string">"Sex"</span>]&#125;&lt;br&gt;<span class="comment">//这也是一种方法</span></span><br></pre></td></tr></table></figure></li></ol><p>运行结果:<br><img src="https://sqhoo.github.io/blogImg/jsp%E5%8C%BA/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/EL_2.png" alt=""></p><ol start="3"><li>获取集合中的内容<br>例子如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  List names=<span class="keyword">new</span> ArrayList();   <span class="comment">//定义一个list</span></span><br><span class="line">  names.add(<span class="string">"zhangsan"</span>);</span><br><span class="line">  names.add(<span class="string">"lisi"</span>);</span><br><span class="line">  request.setAttribute(<span class="string">"names"</span>,names);</span><br><span class="line">%&gt;</span><br><span class="line">姓名<span class="number">1</span>:$&#123;names[<span class="number">0</span>]&#125; &lt;br&gt;</span><br><span class="line">姓名<span class="number">2</span>:$&#123;names[<span class="number">1</span>]&#125;</span><br></pre></td></tr></table></figure></li></ol><p>运行结果:<br><img src="https://sqhoo.github.io/blogImg/jsp%E5%8C%BA/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/EL_3.png" alt=""></p><ol start="4"><li>获取Map中的内容<br>例子如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  Map map=<span class="keyword">new</span> HashMap();<span class="comment">//定义一个hashmap</span></span><br><span class="line">  map.put(<span class="string">"one"</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">  map.put(<span class="string">"two"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">  request.setAttribute(<span class="string">"map"</span>,map);</span><br><span class="line">%&gt;</span><br><span class="line">姓名<span class="number">1</span>:$&#123;map[<span class="string">"one"</span>]&#125; &lt;br&gt;</span><br><span class="line">姓名<span class="number">2</span>:$&#123;map[<span class="string">"two"</span>]&#125;</span><br></pre></td></tr></table></figure></li></ol><p>运行结果:<br><img src="https://sqhoo.github.io/blogImg/jsp%E5%8C%BA/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/EL_4.png" alt=""></p><ol start="5"><li>EL表达式逻辑操作符</li></ol><table><thead><tr><th>关系运算符</th><th>相等转换</th></tr></thead><tbody><tr><td>==</td><td>eq</td></tr><tr><td>!=</td><td>ne</td></tr><tr><td>&lt;</td><td>lt</td></tr><tr><td>&gt;</td><td>gt</td></tr><tr><td>&lt;=</td><td>le</td></tr><tr><td>&gt;=</td><td>ge</td></tr><tr><td>&amp;&amp;</td><td>and</td></tr><tr><td>!</td><td>not</td></tr></tbody></table><p><strong>注意：</strong> 在EL表达式中这两种都可以用例如<code>${2 == 5}</code>和<code>${2 eq 5}</code>返回的值都为false</p><hr><p><strong>备注：</strong><br>EL表达式概念来源<a href="https://baike.baidu.com/item/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/1190845" target="_blank" rel="noopener">百度百科</a><br>EL表达式生效问题来源<a href="http://www.cnblogs.com/MickWoo/p/3998240.html" target="_blank" rel="noopener">博客园</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;介绍一些常用的EL表达式&lt;/h1&gt;
&lt;h4&gt;首先先了解一下什么是EL表达式&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/1190845&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="jsp区" scheme="http://Sqhoo.github.io/categories/jsp%E5%8C%BA/"/>
    
    
      <category term="EL" scheme="http://Sqhoo.github.io/tags/EL/"/>
    
  </entry>
  
  <entry>
    <title>利用session实现用户登录功能</title>
    <link href="http://Sqhoo.github.io/2018/07/06/%E5%88%A9%E7%94%A8session%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <id>http://Sqhoo.github.io/2018/07/06/利用session实现用户登录功能/</id>
    <published>2018-07-06T00:43:33.000Z</published>
    <updated>2018-07-06T14:30:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2>什么是<a href="https://baike.baidu.com/item/session/479100?fr=aladdin" target="_blank" rel="noopener">session</a>?</h2><blockquote><p>Session:在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。</p></blockquote><ol><li>在这之前，我们现在创建一个登录界面<br>部分代码如下:<br>Login.jsp<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>&lt;!-- more --&gt;</p><ol start="2"><li><p>创建中间处理界面<br>这里用到了jsp中的<code>RequestDispatcher</code>对象:<br>它可以在对个界面实现请求数据的共享，所以这里的中间处理界面和<code>welcome.jsp</code>界面的内容必须进行共享，使得<code>welcome.jsp</code>中的数据可以跨界面使用<br>部分代码如下:<br>doLogin.jsp<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    String username=<span class="keyword">new</span> String(request.getParameter(<span class="string">"username"</span>).getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);<span class="comment">//处理中文乱码</span></span><br><span class="line">    session.setAttribute(<span class="string">"username"</span>,username);</span><br><span class="line">    request.getRequestDispatcher(<span class="string">"welcome.jsp"</span>).forward(request,response);<span class="comment">//与welocome.jsp实现session数据的共享</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>创建欢迎界面<br>部分代码如下:<br>Welcome.jsp<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">welcome  </span><br><span class="line">&#123;%</span><br><span class="line">String s=session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"><span class="comment">//如果取出的s为null，则没有经过登录界面进入该欢迎界面，非法访问，跳转到login进行登录。</span></span><br><span class="line"><span class="comment">//因为如果s为null，则session中没有值，所以并没有进行登录来转到该欢迎界面，而是直接访问了该界面</span></span><br><span class="line"><span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">  response.sendRedirect(<span class="string">"login.jsp"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  out.print(s);</span><br><span class="line">&#125;</span><br><span class="line">%&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>运行结果如下:<br>Login.jsp:<br><img src="https://sqhoo.github.io/blogImg/jsp%E5%8C%BA/%E5%88%A9%E7%94%A8session%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/login.jsp.png" alt="login.jsp"><br>Welcome.jsp:<br><img src="https://sqhoo.github.io/blogImg/jsp%E5%8C%BA/%E5%88%A9%E7%94%A8session%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/welcome.jsp.png" alt="welcome.jsp"></p></li></ol><hr><p><strong>注意:</strong> 虽然显示的是<code>/Welcome.jsp</code>的内容，但是地址栏中的url为<code>/doLogin.jsp</code>,因为是<code>Welcome.jsp</code>的地位是被共享的，所以里面的内容都被<code>doLogin.jsp</code>共享了，所以显示的是<code>doLogin.jsp</code>界面。</p><p>备注: session的概念来源于<a href="https://baike.baidu.com/item/session/479100?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;什么是&lt;a href=&quot;https://baike.baidu.com/item/session/479100?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;session&lt;/a&gt;?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Ses
      
    
    </summary>
    
      <category term="jsp区" scheme="http://Sqhoo.github.io/categories/jsp%E5%8C%BA/"/>
    
    
      <category term="随笔" scheme="http://Sqhoo.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="session" scheme="http://Sqhoo.github.io/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Markdown常用语法</title>
    <link href="http://Sqhoo.github.io/2018/07/02/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://Sqhoo.github.io/2018/07/02/Markdown常用语法/</id>
    <published>2018-07-02T07:48:23.000Z</published>
    <updated>2018-07-26T21:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1>Markdown 常用语法</h1><p>&lt;br&gt;</p><h2>简介</h2><blockquote><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p></blockquote><h2>标题</h2><p>1.用#来识别<br>例如：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="code">     ...</span></span><br></pre></td></tr></table></figure></p><p>效果如下：&lt;!-- more --&gt;</p><h1>一级标题</h1><h2>二级标题</h2><h3>三级标题</h3><h4>四级标题</h4><p>2.用-或者=标记<br>例如：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">-------</span><br><span class="line">二级标题</span><br><span class="line">=======</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><h1>一级标题</h1><h2>二级标题</h2><h2>列表</h2><p>1.有序列表<br>有序列表很好写，只需要写(数字|字母|其他能排序的字符).+空格+后面的内容即可。形如（<code>1. 有序列表</code>）。<br>下面给出一个示例：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一句话</span><br><span class="line"><span class="bullet">2. </span>第二句话</span><br><span class="line"><span class="bullet">3. </span>第二句话</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><ol><li>第一句话</li><li>第二句话</li><li>第三句话</li></ol><p>2.无序列表</p><p>无序列表直接在前面用-、+和*作为标记：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>第一句话</span><br><span class="line"><span class="bullet">+ </span>第二句话</span><br><span class="line"><span class="bullet">* </span>第二句话</span><br></pre></td></tr></table></figure></p><p>效果如下：&lt;!-- more --&gt;</p><ul><li>第一句话</li><li>第二句话</li><li>第三句话</li></ul><h2>引用</h2><p>这个用文字说明就很难说了，看下面的例子吧！！<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是一句引用    //在&gt;后面有一个空格</span></span><br><span class="line"><span class="quote">&gt;     引用一小段代码    //在&gt;后面五个空格</span></span><br><span class="line"><span class="quote">&gt; 以下是代码块：</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="code">    public static void main(String[] args)&#123;</span></span><br><span class="line"><span class="code">    System.out.println("这是一个代码块！");</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&gt;一级引用</span><br><span class="line">&gt;&gt;二级引用</span><br><span class="line">&gt;&gt;&gt;三级引用</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><blockquote><p>这是一句引用    //在&gt;后面有一个空格</p><pre><code>引用一小段代码    //在&gt;后面五个空格</code></pre><p>以下是代码块：</p><pre><code>public static void main(String[] args){System.out.println(&quot;这是一个代码块！&quot;);}</code></pre><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><h2>强调</h2><p>两个*或者-代表加粗，一个*或者-代表斜体，~~ 代表删除,但是因为前端预览是js渲染的，后端输出php处理的，两者的markdown语法有差异~~来做删除线被认为是<strong>不规范的markdown语法</strong>，js渲染那边会去掉。建议采用html中<code>&lt;del&gt;</code>来删除。</p><p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗**</span>  </span><br><span class="line"><span class="emphasis">*斜体*</span>  </span><br><span class="line">~~删除~~  </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span></span>删除<span class="xml"><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>效果如下：<strong>加粗</strong><br><em>斜体</em><br><s>删除</s><br>&lt;del&gt;删除&lt;/del&gt;</p><h2>链接</h2><p>1.图片链接格式：<code>![]()</code>      <code>![填写图片文本(可忽略)](图片链接)</code><br>例如：</p><blockquote><pre><code>![](https://sqhoo.github.io/img/Cristiano.jpg)//行内式![][avatar]//参考式  //空一行[avatar]:https://sqhoo.github.io/img/Cristiano.jpg/</code></pre></blockquote><p>运行结果如下:<br><img src="https://sqhoo.github.io/images/Cristiano.jpg" alt=""><br><img src="https://sqhoo.github.io/images/Cristiano.jpg" alt=""></p><p>2.超链接格式：<code>[]()</code>      <code>![文本](链接地址)</code><br>例如：</p><blockquote><pre><code>[返回主页](https:/sqhoo.github.io)//行内式[返回主页][url]//参考式//空一行[url]:https:/sqhoo.github.io&lt;https:/sqhoo.github.io&gt;//自动链接</code></pre></blockquote><p>运行结果如下：<br><a href="https:/sqhoo.github.io" target="_blank" rel="noopener">返回主页</a><br><a href="https://sqhoo.github.io">返回主页</a></p><p><a href="https:/sqhoo.github.io" target="_blank" rel="noopener">https:/sqhoo.github.io</a></p><h2>代码</h2><p>1.行内代码</p><p>行内代码使用`文字`来实现<br>代码块用```+语言名称，然后末尾再加上```结束，中间写内容实现代码高亮<br>例如：</p><blockquote></blockquote><p>行内代码<code>main(String[] args)</code>的例子<br>代码块的例子</p><p><img src="https://sqhoo.github.io/blogImg/blog%E5%8C%BA/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/%E4%BB%A3%E7%A0%81%E5%9D%97.png" alt=""></p><p>效果如下：<br>行内代码<code>main(String[] args)</code>的例子</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一个代码块！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2>表格</h2><p>表格对齐格式</p><ul><li>居左: <code>:----</code></li><li>居中: <code>:----:</code>或<code>----</code></li><li>居右: <code>----:</code></li></ul><p>例如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|标题|标题|标题|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|left1|middle1|right1|</span><br><span class="line">|left2|middle3|right3|</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:center">标题</th><th style="text-align:right">标题</th></tr></thead><tbody><tr><td style="text-align:left">left1</td><td style="text-align:center">middle1</td><td style="text-align:right">right1</td></tr><tr><td style="text-align:left">left2</td><td style="text-align:center">middle3</td><td style="text-align:right">right3</td></tr></tbody></table><h2>分割线</h2><p>在一行中写三个*、-或_实现一条分割线，且本行不能有任何的除空格以外的东西。<br>例如：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="emphasis">___</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br></pre></td></tr></table></figure></p><p>效果如下：</p><hr><hr><hr><hr><h2>换行</h2><p>在句尾加两个空格并另起一行表示换行例如：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我要  换行      //没有加回车</span><br><span class="line">我要  </span><br><span class="line">换行      //加了两个空格</span><br></pre></td></tr></table></figure></p><p>结果如下:<br>我要  换行</p><p>我要<br>换行</p><h2>脚注</h2><p>用<code>[^]</code>来定义脚注<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转到脚注1[^1]</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">这里是脚注1</span></span><br></pre></td></tr></table></figure></p><p>结果如下：这是一个脚注的例子<a href="%E8%BF%99%E9%87%8C%E6%98%AF%E8%84%9A%E6%B3%A8">^1</a></p><p>**注意：**脚注不是markdown的基本语法，属于拓展语法，想实现这个功能，可以转到<a href="https://github.com/LouisBarranqueiro/hexo-footnotes" target="_blank" rel="noopener">https://github.com/LouisBarranqueiro/hexo-footnotes</a>下载拓展。我的这个网页没有这个拓展所以不支持，但是悬浮在上面可以看到左下角出来的内容含有这个注解。</p><h2>使用HTML标签说明</h2><p>在markdown中可以使用任何的html标签，因为.md文件最终是转成html传上去的。还是给出几个例子吧！<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">换行<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线文本<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:green"</span>&gt;</span>字体变色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果如下换行&lt;br&gt;&lt;br&gt;&lt;u&gt;下划线文本&lt;/u&gt;&lt;p style=&quot;color:green&quot;&gt;原谅色&lt;/p&gt;</p><hr><p><strong>这些就是markdown常用语法，一般引用，代码高亮，分割线、标题级别、链接、列表比较常用。</strong></p><p>&lt;p style=&quot;color:#0088cc&quot;&gt;这是本人的第一个博客，将别人博客一些内容和自己的内容整合了一下，格式略糙，感谢支持QAQ！！！&lt;/p&gt;</p><p>备注：Markdown简介来源<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;Markdown 常用语法&lt;/h1&gt;
&lt;p&gt;&amp;lt;br&amp;gt;&lt;/p&gt;
&lt;h2&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="博客区" scheme="http://Sqhoo.github.io/categories/%E5%8D%9A%E5%AE%A2%E5%8C%BA/"/>
    
    
      <category term="Markdown" scheme="http://Sqhoo.github.io/tags/Markdown/"/>
    
      <category term="第一个博客" scheme="http://Sqhoo.github.io/tags/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
